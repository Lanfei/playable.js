import { Layer } from './Layer';
import { Ticker } from '../system/Ticker';
import { Rectangle } from '../geom/Rectangle';
import { ResourceManager, ResourceInfo, ResourceManagerOption } from '../net/ResourceManager';
export declare class Stage extends Layer {
    static readonly SHOW_ALL: string;
    static readonly EXACT_FIT: string;
    static readonly NO_SCALE: string;
    static readonly NO_BORDER: string;
    static readonly FIXED_WIDE: string;
    static readonly FIXED_NARROW: string;
    static readonly FIXED_WIDTH: string;
    static readonly FIXED_HEIGHT: string;
    protected $drawCalls: number;
    protected $activated: boolean;
    protected $scaleMode: string;
    protected $viewportWidth: number;
    protected $viewportHeight: number;
    protected $viewportBackground: string;
    protected readonly $ticker: Ticker;
    protected readonly $elementEvents: ElementEvent[];
    protected readonly $viewportCanvas: HTMLCanvasElement;
    protected readonly $viewportContext: CanvasRenderingContext2D;
    protected readonly $renderBounds: Rectangle;
    protected readonly $boundResizeViewportCanvas: () => void;
    constructor(canvas?: HTMLCanvasElement);
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get ticker(): Ticker;
    get fps(): number;
    get drawCalls(): number;
    get activated(): boolean;
    get scaleMode(): string;
    set scaleMode(scaleMode: string);
    get viewportCanvas(): HTMLCanvasElement;
    get viewportWidth(): number;
    set viewportWidth(width: number);
    get viewportHeight(): number;
    set viewportHeight(height: number);
    get viewportBackground(): string;
    set viewportBackground(viewportBackground: string);
    createResourceManager(list: Array<ResourceInfo>, options?: ResourceManagerOption): ResourceManager;
    removeSelf(): this;
    protected $initEvents(): void;
    protected $addElementEvent(target: EventTarget, type: string, listener: (event: any) => void, options?: boolean | AddEventListenerOptions): void;
    protected $removeElementEvents(): void;
    protected $addTouchEventListeners(): void;
    protected $dispatchTouches(type: string, event: any): void;
    protected $dispatchTouchEvent(type: string, pageX: number, pageY: number, identifier: number): void;
    protected $calculateRenderBounds(): void;
    protected $resizeCanvas(): void;
    protected $resizeViewportCanvas(): void;
    protected $render(): number;
}
interface ElementEvent {
    target: EventTarget;
    type: string;
    listener: (event: any) => void;
}
export {};
